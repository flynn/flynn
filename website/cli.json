{
	"apps": "usage: flynn apps\n\nList all apps.\n\nExamples:\n\n\u0009$ flynn apps\n\u0009ID                                NAME\n\u0009f1e85f5392454a329929e3f27f7a5644  gitreceive\n\u00094c6325c1f13547059e5496c91a6a97dd  router\n\u00098cfd94d040b14bd8aecc086c8f5f5e0d  blobstore\n\u0009f488cfb478f54edea497bf6347c2eb80  postgres\n\u00099d5be7be873c41b9898032c08aa87597  controller\n",
	"cluster": "usage: flynn cluster\n       flynn cluster add [-g \u003cgithost\u003e] [-p \u003ctlspin\u003e] \u003ccluster-name\u003e \u003curl\u003e \u003ckey\u003e\n       flynn cluster remove \u003ccluster-name\u003e\n\nManage clusters in the ~/.flynnrc configuration file.\n\nOptions:\n\u0009-g, --git-host \u003cgithost\u003e  git host (if host differs from api URL host)\n\u0009-p, --tls-pin \u003ctlspin\u003e    SHA256 of the cluster's TLS cert (useful if it is self-signed)\n\nCommands:\n\u0009With no arguments, shows a list of clusters.\n\n\u0009add     adds a cluster to the ~/.flynnrc configuration file\n\u0009remove  removes a cluster from the ~/.flynnrc configuration file\n\nExamples:\n\n\u0009$ flynn cluster add -g dev.localflynn.com:2222 -p KGCENkp53YF5OvOKkZIry71+czFRkSw2ZdMszZ/0ljs= default https://dev.localflynn.com e09dc5301d72be755a3d666f617c4600\n\u0009Cluster \"default\" added.\n",
	"create": "usage: flynn create [\u003cname\u003e]\n\nCreate an application in Flynn.\n\nIf a name is not provided, a random name will be generated.\n\nIf run from a git repository, a 'flynn' remote will be created or replaced that\nallows deploying the application via git.\n\nExamples:\n\n\u0009$ flynn create\n\u0009Created turkeys-stupefy-perry\n",
	"delete": "usage: flynn delete\n\nDelete an app.\n\nIf run from a git repository with a 'flynn' remote for the app, it will be\nremoved.\n\nExamples:\n\n\u0009$ flynn -a turkeys-stupefy-perry delete\n\u0009Are you sure you want to delete the app \"turkeys-stupefy-perry\"? (yes/no): yes\n\u0009Deleted turkeys-stupefy-perry\n",
	"env": "usage: flynn env [-t \u003cproc\u003e]\n       flynn env set [-t \u003cproc\u003e] \u003cvar\u003e=\u003cval\u003e...\n       flynn env unset [-t \u003cproc\u003e] \u003cvar\u003e...\n       flynn env get [-t \u003cproc\u003e] \u003cvar\u003e\n\nManage app environment variables.\n\nOptions:\n\u0009-t, --process-type \u003cproc\u003e  set or read env for specified process type\n\nCommands:\n\u0009With no arguments, shows a list of environment variables.\n\n\u0009set    sets value of one or more env variables\n\u0009unset  deletes one or more variables\n\u0009get    returns the value of variable\n\nExamples:\n\n\u0009$ flynn env set FOO=bar BAZ=foobar\n\u0009Created release 5058ae7964f74c399a240bdd6e7d1bcb.\n\n\u0009$ flynn env\n\u0009BAZ=foobar\n\u0009FOO=bar\n\n\u0009$ flynn env get -t web FOO\n\u0009bar\n\n\u0009$ flynn env unset FOO\n\u0009Created release b1bbd9bc76d6436ea2fd245300bce72e.\n",
	"key": "usage: flynn key\n       flynn key add [\u003cpublic-key-file\u003e]\n       flynn key remove \u003cfingerprint\u003e\n\nManage SSH public keys associated with the Flynn controller.\n\nCommands:\n\u0009With no arguments, shows a list of SSH public keys.\n\n\u0009add     adds an ssh public key to the Flynn controller\n\n\u0009\u0009It tries these sources for keys, in order:\n\n\u0009\u00091. \u003cpublic-key-file\u003e argument\n\u0009\u00092. output of ssh-add -L, if any\n\u0009\u00093. file $HOME/.ssh/id_rsa.pub\n\n\u0009remove  removes an ssh public key from the Flynn controller.\n\nExamples:\n\n\u0009$ flynn key\n\u00095e:67:40:b6:79:db:56:47:cd:3a:a7:65:ab:ed:12:34  user@test.com\n\n\u0009$ flynn key remove 5e:67:40:b6:79:db:56:47:cd:3a:a7:65:ab:ed:12:34\n\u0009Key 5e:67:40:b6:79:dbâ€¦ removed.\n",
	"kill": "usage: flynn kill \u003cjob\u003e\n\nKill a job.",
	"log": "usage: flynn log [options] \u003cjob\u003e\n\nStream log for a specific job.\n\nOptions:\n\u0009-s, --split-stderr  send stderr lines to stderr\n\u0009-f, --follow        stream new lines after printing log buffer\n",
	"provider": "usage: flynn provider\n\nLists resource providers that have been associated with the controller.\n",
	"ps": "usage: flynn ps\n\nList flynn jobs.\n\nExample:\n\n\u0009$ flynn ps\n\u0009ID                                      TYPE\n\u0009flynn-bb97c7dac2fa455dad73459056fabac2  web\n\u0009flynn-c59e02b3e6ad49809424848809d4749a  web\n\u0009flynn-46f0d715a9684e4c822e248e84a5a418  web\n",
	"release": "usage: flynn release add [-t \u003ctype\u003e] [-f \u003cfile\u003e] \u003curi\u003e\n\nManage app releases.\n\nOptions:\n\u0009-t \u003ctype\u003e          type of the release. Currently only 'docker' is supported. [default: docker]\n\u0009-f, --file \u003cfile\u003e  release configuration file\n\nCommands:\n\u0009add   add a new release\n\n\u0009\u0009Create a new release from a Docker image.\n\n\u0009\u0009The optional file argument takes a path to a file containing release\n\u0009\u0009configuration in a JSON format. It's primarily used for specifying the\n\u0009\u0009release environment and processes (similar to a Procfile). It can take any\n\u0009\u0009of the arguments the controller Release type can take.\n\nExamples:\n\n\u0009Release an echo server using the flynn/slugbuilder image as a base, running socat.\n\n\u0009$ cat config.json\n\u0009{\n\u0009\u0009\"env\": {\"MY_VAR\": \"Hello World, this will be available in all process types.\"},\n\u0009\u0009\"processes\": {\n\u0009\u0009\u0009\"echo\": {\n\u0009\u0009\u0009\u0009\"cmd\": [\"socat -v tcp-l:$PORT,fork exec:/bin/cat\"],\n\u0009\u0009\u0009\u0009\"entrypoint\": [\"sh\", \"-c\"],\n\u0009\u0009\u0009\u0009\"env\": {\"ECHO\": \"This var is specific to the echo process type.\"},\n\u0009\u0009\u0009\u0009\"ports\": [{\"proto\": \"tcp\"}]\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009$ flynn release add -f config.json https://registry.hub.docker.com/flynn/slugbuilder?id=15d72b7f573b\n\u0009Created release f55fde802170.\n",
	"resource": "usage: flynn resource add \u003cprovider\u003e\n\nManage resources for the app.\n\nCommands:\n\u0009add  provisions a new resource for the app using \u003cprovider\u003e.\n",
	"route": "usage: flynn route\n       flynn route add http [-s \u003cservice\u003e] [-c \u003ctls-cert\u003e -k \u003ctls-key\u003e] [--sticky] \u003cdomain\u003e\n       flynn route add tcp [-s \u003cservice\u003e]\n       flynn route remove \u003cid\u003e\n\nManage routes for application.\n\nOptions:\n\u0009-s, --service \u003cservice\u003e    service name to route domain to (defaults to APPNAME-web)\n\u0009-c, --tls-cert \u003ctls-cert\u003e  path to PEM encoded certificate for TLS, - for stdin (http only)\n\u0009-k, --tls-key \u003ctls-key\u003e    path to PEM encoded private key for TLS, - for stdin (http only)\n\u0009--sticky                   enable cookie-based sticky routing (http only)\n\nCommands:\n\u0009With no arguments, shows a list of routes.\n\u0009\n\u0009add     adds a route to an app\n\u0009remove  removes a route\n\nExamples:\n\n\u0009$ flynn route add http example.com\n\n\u0009$ flynn route add tcp\n",
	"run": "usage: flynn run [-d] [-r \u003crelease\u003e] [-e \u003centrypoint\u003e] \u003ccommand\u003e [\u003cargument\u003e...]\n\nRun a job.\n\nOptions:\n\u0009-d, --detached   run job without connecting io streams\n\u0009-r \u003crelease\u003e     id of release to run (defaults to current app release)\n\u0009-e \u003centrypoint\u003e  overwrite the default entrypoint of the release's image\n",
	"scale": "usage: flynn scale [-r \u003crelease\u003e] \u003ctype\u003e=\u003cqty\u003e...\n\nScale changes the number of jobs for each process type in a release.\n\nOptions:\n\u0009-r, --release \u003crelease\u003e  id of release to scale (defaults to current app release)\n\nExample:\n\n\u0009$ flynn scale web=2 worker=5\n",
	"version": "usage: flynn version\n\nShow flynn version string.\n"
}
