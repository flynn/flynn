#!/bin/bash
#
# A script to build and release Flynn VM images.
#
# PREREQUISITES:
#
# - Install VirtualBox
#   wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
#   echo deb http://download.virtualbox.org/virtualbox/debian trusty contrib | sudo tee /etc/apt/sources.list.d/virtualbox.list
#   sudo apt-get update
#   sudo apt-get install dkms virtualbox-4.3
#
# - Install packer
#   sudo apt-get install -y unzip
#   wget -O /tmp/packer.zip https://dl.bintray.com/mitchellh/packer/packer_0.8.6_linux_amd64.zip
#   sudo unzip -d /usr/local/bin /tmp/packer.zip
#   rm /tmp/packer.zip
#
# - Install up-to-date s3cmd so "s3cmd info" works
#   sudo apt-get install -y python-dateutil
#   wget -O /tmp/s3cmd.deb http://archive.ubuntu.com/ubuntu/pool/universe/s/s3cmd/s3cmd_1.5.0~rc1-2_all.deb
#   sudo dpkg -i /tmp/s3cmd.deb
#   rm /tmp/s3cmd.deb
#
# - Install aws CLI tool
#   sudo apt-get install awscli
#
# - Set AWS keys
#   export AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX
#   export AWS_SECRET_ACCESS_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#   export AWS_DEFAULT_REGION=us-east-1

set -eo pipefail
shopt -s nullglob

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"
source "${ROOT}/script/lib/aws.sh"
source "${ROOT}/script/lib/util.sh"

UBUNTU_ISO_URL="http://releases.ubuntu.com/trusty/ubuntu-14.04.3-server-amd64.iso"
UBUNTU_ISO_SHA="a3b345908a826e262f4ea1afeb357fd09ec0558cf34e6c9112cead4bb55ccdfb"

usage() {
  cat <<USAGE >&2
usage: $0 [options] VERSION

OPTIONS:
  -h            Show this message
  -k            Keep release directory
  -b BUCKET     The S3 bucket to upload vagrant images to [default: 'flynn']
  -d DOMAIN     The CloudFront domain [default: 'dl.flynn.io']
  -r DIR        Resume the release using DIR
  -c CACHE      Directory to cache base VM images [default: '/tmp']
  -a AWSREGION  AWS region to use to build the AMI [default: 'us-east-1']

Requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to be set
USAGE
}

main() {
  local bucket dir domain
  local cache="/tmp"
  local keep=false

  while getopts "hkb:d:r:c:a:" opt; do
    case $opt in
      h)
        usage
        exit 1
        ;;
      k) keep=true ;;
      b) bucket=${OPTARG} ;;
      d) domain=${OPTARG} ;;
      r)
        dir=${OPTARG}
        if [[ ! -d "${dir}" ]]; then
          fail "No such directory: ${dir}"
        fi
        ;;
      c)
        cache=${OPTARG}
        if [[ ! -d "${cache}" ]]; then
          fail "No such directory: ${cache}"
        fi
        ;;
      a)
        AWS_DEFAULT_REGION=${OPTARG}
        ;;
      ?)
        usage
        exit 1
        ;;
    esac
  done
  shift $((${OPTIND} - 1))

  if [[ $# -ne 1 ]]; then
    usage
    exit 1
  fi

  check_aws_keys

  # Assume us-east-1 if not set.
  AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}

  local version=$1
  bucket=${bucket:-"flynn"}
  dir="${dir:-$(mktemp -d)}"
  domain="${domain:-"dl.flynn.io"}"
  builders=("vmware" "virtualbox")

  info "using base dir: ${dir}"

  info "checking for stage1 targets"
  local stage1_targets=()
  for builder in ${builders[@]}; do
    if [[ ! -d "${dir}/base_${builder}_${UBUNTU_ISO_SHA}" ]]; then
      stage1_targets+=("${builder}-iso")
    fi
  done

  if [[ ${#stage1_targets[@]} -eq 0 ]]; then
    info "all stage1 targets already built"
  else
    local stage1_builders=$(join , "${stage1_targets[@]}")
    info "building stage1 targets for ${stage1_builders}"
    pushd "${ROOT}/util/packer/ubuntu-14.04" >/dev/null
    local output=$(packer build \
      -only="${stage1_builders}" \
      -var "headless=true" \
      -var "output_dir=${cache}" \
      -var "iso_url=${UBUNTU_ISO_URL}" \
      -var "iso_sha=${UBUNTU_ISO_SHA}" \
      stage1.json | parse_packer)
    popd >/dev/null
  fi

  local amis="$(cat "${dir}/amis.txt" 2>/dev/null)"

  info "checking for stage2 targets"
  local boxes=()
  local stage2_targets=()
  for builder in ${builders[@]}; do
    local box="${dir}/flynn-base_${version}_${builder}.box"
    if [[ -f ${box} ]]; then
      boxes+=(${box})
    else
      case $builder in
        vmware)
          stage2_targets+=("vmware-vmx")
          ;;
        virtualbox)
          stage2_targets+=("virtualbox-ovf")
          ;;
      esac
    fi
  done

  if [[ -z "${amis}" ]]; then
    stage2_targets+=("amazon-ebs")
  fi

  if [[ ${#stage2_targets[@]} -eq 0 ]]; then
    info "all stage2 targets already built"
  else
    info "getting latest ami id"
    ami_id=$(latest_ami)
    if [[ -z "${ami_id}" ]]; then
      fail "unable to get latest ami id"
    fi
    info "ami build will use ${ami_id} as source"

    local stage2_builders=$(join , "${stage2_targets[@]}")
    info "building stage2 targets for ${stage2_builders}"
    pushd "${ROOT}/util/packer/ubuntu-14.04" >/dev/null
    local output=$(packer build \
      -machine-readable \
      -only="${stage2_builders}" \
      -var "headless=true" \
      -var "input_dir=${cache}" \
      -var "output_dir=${dir}" \
      -var "iso_sha=${UBUNTU_ISO_SHA}" \
      -var "flynn_repository=https://${domain}" \
      -var "source_ami=${ami_id}" \
      -var "aws_region=${AWS_DEFAULT_REGION}" \
      -var "version=${version}" \
      stage2.json | parse_packer)
    popd >/dev/null

    info "parsing build output"
    while read line; do
      IFS="|" read builder artifacts <<< "${line}"

      case "${builder}" in
        virtualbox-ovf | vmware-vmx)
          boxes+=("${artifacts}")
          ;;
        amazon-ebs)
          amis="${artifacts}"
          ;;
      esac
    done <<< "${output}"

    echo -n "${amis}" > "${dir}/amis.txt"
  fi

  info "fetching current vagrant manifest"
  local manifest="$(s3cmd \
    --no-progress \
    get "s3://${bucket}/vagrant/flynn-base.json" - 2>/dev/null)"
  if [[ -z "${manifest}" ]]; then
    manifest='{"name":"flynn-base"}'
  fi
  mkdir -p "${dir}/manifests/vagrant"
  cat > "${dir}/manifests/vagrant/flynn-base.json" <<< "${manifest}"

  for box in ${boxes[@]}; do
    local box_name="$(basename "${box}")"
    local box_verstr="${box_name##*_}"
    local provider="${box_verstr%.*}"

    if ! s3cmd info "s3://${bucket}/vagrant/boxes/${box_name}" &>/dev/null; then
      info "uploading ${box_name} to s3://${bucket}/vagrant/boxes"
      s3cmd put --acl-public --no-preserve "${box}" "s3://${bucket}/vagrant/boxes/"
    fi

    info "calculating SHA256 checksum of ${box_name}"
    checksum=$(sha256 "${box}")
    if [[ ${#checksum} -ne 64 ]]; then
      fail "invalid checksum generated: '${checksum}'"
    fi
    info "checksum is ${checksum}"


    info "updating vagrant manifest"
    "${ROOT}/util/release/flynn-release" vagrant \
      "https://${domain}/vagrant/boxes/${box_name}" \
      "${checksum}" \
      "${version}" \
      "${provider}" \
      <<< "${manifest}" \
      > "${dir}/manifests/vagrant/flynn-base.json"
    manifest=$(cat "${dir}/manifests/vagrant/flynn-base.json")
  done

  info "fetching current EC2 manifest"
  local manifest="$(s3cmd \
    --no-progress \
    get "s3://${bucket}/ec2/images.json" - 2>/dev/null)"
  if [[ -z "${manifest}" ]]; then
    manifest='{"name":"flynn-base"}'
  fi

  info "updating EC2 manifest"
  mkdir -p "${dir}/manifests/ec2"
  "${ROOT}/util/release/flynn-release" amis \
    "${version}" \
    "${amis}" \
    <<< "${manifest}" \
    > "${dir}/manifests/ec2/images.json"

  info "releasing manifests"
  sync_cloudfront "${dir}/manifests/" "s3://${bucket}/"

  info "successfully released images for version ${version}"

  if $keep; then
    info "locally built images will remain in ${dir}"
  else
    info "removing locally built images"
    rm -rf "${dir}"
  fi
}

# parse_packer reads machine readable packer output, prints the
# ui messages to stderr and prints the artifacts to stdout.
#
# example artifact output:
#
#   virtualbox-ovf|/tmp/tmp.FhRkEcY9YJ/flynn-base_20141021.1_virtualbox.box
#   amazon-ebs|eu-west-1:ami-4c832d3b,us-east-1:ami-fea92d96
#
parse_packer() {
  sed "s/%!(PACKER_COMMA)/,/g" | while read -r line; do
    IFS="," read -r _ target type data <<< "${line}"

    case "${type}" in
      ui) echo -e "$(cut -d "," -f 2 <<< "${data}")" >&2 ;;
      artifact)
        if [[ "${target}" == "virtualbox-ovf" ]] \
          && [[ "${data:0:9}" == "0,file,0," ]]; then
          echo "virtualbox-ovf|${data:9}"
        elif [[ "${target}" == "vmware-vmx" ]] \
          && [[ "${data:0:9}" == "0,file,0," ]]; then
          echo "vmware-vmx|${data:9}"
        elif [[ "${target}" == "amazon-ebs" ]] \
          && [[ "${data:0:5}" == "0,id," ]]; then
          echo "amazon-ebs|${data:5}"
        fi
        ;;
    esac
  done
}

# latest_ami retrieves the latest Ubuntu Trusty HVM EBS SSD AMI ID
#
# example output: ami-2dcf7b46
#
latest_ami() {
  aws ec2 describe-images --owners 099720109477 \
    --filters "Name=architecture,Values=x86_64" \
    --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*" \
    --query 'Images[*].[Name, ImageId]' \
    --output text | sort -r | cut -f2 | head -n1
}

main $@
