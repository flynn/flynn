#!/bin/bash
#
# A script to build and release Flynn packages.
#
# PREREQUISITES:
#
# - Install required packages
#   sudo apt-get install -y reprepro dpkg-sig gnupg-agent
#
# - Install up-to-date s3cmd so CloudFront invalidation works:
#   sudo apt-get install -y python-dateutil
#   wget -O /tmp/s3cmd.deb http://archive.ubuntu.com/ubuntu/pool/universe/s/s3cmd/s3cmd_1.5.0~rc1-2_all.deb
#   sudo dpkg -i /tmp/s3cmd.deb
#   rm /tmp/s3cmd.deb
#
# - Configure s3cmd
#   s3cmd --configure
#
# - Import GPG key used to sign packages
#   gpg --import < /path/to/key.gpg
#
# - Set large gpg-agent cache expiry
#   echo -e "default-cache-ttl 4294967295\nmax-cache-ttl 4294967295" | tee ~/.gnupg/gpg-agent.conf
#
# - Start gpg-agent
#   eval $(gpg-agent --daemon)
#
# - Trigger cache of passphrase by signing something
#   export GPG_TTY=`tty`
#   echo | gpg --sign --yes --use-agent --output /dev/null /dev/stdin
#
# - Log in to Docker to push images
#   docker login

set -eo pipefail

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"
source "${ROOT}/script/lib/aws.sh"

usage() {
  cat <<USAGE >&2
usage: $0 [options] COMMIT

OPTIONS:
  -h            Show this message
  -k            Keep release directory
  -b BUCKET     The S3 bucket to sync the apt repo with [default: flynn]
  -p PREFIX     The image URL prefix
  -r DIR        Resume the release using DIR
USAGE
}

main() {
  local bucket dir image_prefix
  local keep=false

  while getopts "hkb:p:r:" opt; do
    case $opt in
      h)
        usage
        exit 1
        ;;
      k) keep=true ;;
      b) bucket=${OPTARG} ;;
      p) image_prefix=${OPTARG} ;;
      r)
        dir=${OPTARG}
        if [[ ! -d "${dir}" ]]; then
          fail "No such directory: ${dir}"
        fi
        ;;
      ?)
        usage
        exit 1
        ;;
    esac
  done
  shift $((${OPTIND} - 1))

  if [[ $# -ne 1 ]]; then
    usage
    exit 1
  fi

  local commit=$1
  local flynn_release="${ROOT}/util/release/flynn-release"

  info "checking status of commit ${commit}"
  if ! "${flynn_release}" status ${commit}; then
    fail "commit has not passed CI"
  fi

  bucket="${bucket:-"flynn"}"
  dir="${dir:-$(mktemp -d)}"
  info "using base dir: ${dir}"

  export GOPATH="${dir}"
  local src="${GOPATH}/src/github.com/flynn/flynn"

  if [[ ! -d "${src}/.git" ]]; then
    info "cloning git repo"
    rm -rf "${src}"
    git clone --quiet https://github.com/flynn/flynn "${src}"
  fi

  info "downloading apt repo"
  # NOTE: the trailing slash is necessary
  apt_dir="${dir}/apt/"
  mkdir -p "${apt_dir}"
  s3cmd sync --delete-removed --no-preserve "s3://${bucket}/ubuntu/" "${apt_dir}"

  info "determining version"
  local date=$(date +%Y%m%d)
  local iteration=$(find "${apt_dir}" -name "flynn-host*${date}*.deb" | wc -l)
  local version="${date}.${iteration}"
  info "using version ${version}"

  pushd "${src}" >/dev/null

  info "pulling dependent images"
  git grep -h "^FROM" **/Dockerfile \
    | cut -d " " -f 2 \
    | sort \
    | uniq \
    | xargs -L 1 docker pull

  info "building flynn"
  git checkout --force --quiet $commit
  git tag "v${version}"

  if [[ -n "${image_prefix}" ]]; then
    sed "s/^CONFIG_IMAGE_URL_PREFIX=.*$/CONFIG_IMAGE_URL_PREFIX=${image_prefix}/" -i tup.config
  fi

  make release

  popd >/dev/null

  info "uploading images"
  "${flynn_release}" upload "${src}/version.json"

  info "building deb package"
  rm -f "${src}"/*.deb
  "${ROOT}/script/build-deb" -d "${src}" "${version}"

  info "signing deb package"
  local deb=$(ls "${src}"/*.deb)
  dpkg-sig -g "--use-agent --batch --no-tty" --sign builder "${deb}"

  info "adding deb to apt repo"
  reprepro -b "${apt_dir}" includedeb flynn "${deb}"

  info "uploading apt repo"
  sync_cloudfront "${apt_dir}" "s3://${bucket}/ubuntu/"

  info "successfully released packages for version ${version}"

  if $keep; then
    info "locally built packages will remain in ${dir}"
  else
    info "removing locally built packages"
    rm -rf "${dir}"
  fi

  # print results to fd 3 if open
  if [[ -e "/dev/fd/3" ]]; then
    local deb_name=$(basename "${apt_dir}pool/main/f/flynn-host/flynn-host_${version}"*.deb)

    cat <<EOF >&3
version|${version}
deb_url|https://s3.amazonaws.com/${bucket}/ubuntu/pool/main/f/flynn-host/${deb_name}
EOF
  fi
}

main $@
