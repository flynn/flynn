#!/bin/bash
#
# A script to do a full release of Flynn (packages + VM images)
#
# PREREQUISITES:
#
# - A recent version of jq (which has the --exit-status flag)
#   sudo curl -sLo /usr/local/bin/jq http://stedolan.github.io/jq/download/linux64/jq
#   sudo chmod +x /usr/local/bin/jq

set -eo pipefail

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"
source "${ROOT}/script/lib/aws.sh"
source "${ROOT}/script/lib/release.sh"

usage() {
  cat <<USAGE >&2
usage: $0 [options]

OPTIONS:
  -h            Show this message
  -b BUCKET     The S3 bucket to upload packages and vm images to [default: flynn]
  -c COMMIT     The commit to build [default: the master branch of https://github.com/flynn/flynn.git]
  -d DOMAIN     The CloudFront domain [default: dl.flynn.io]
  -r DIR        Resume the release using DIR
  -t DIR        Path to the local TUF repository [default: /etc/flynn/tuf]

Requires AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and GITHUB_TOKEN to be set
USAGE
}

main() {
  local bucket commit dir domain tuf_dir

  while getopts "hb:c:d:r:t:" opt; do
    case $opt in
      h)
        usage
        exit 1
        ;;
      b) bucket=${OPTARG} ;;
      c) commit=${OPTARG} ;;
      d) domain=${OPTARG} ;;
      r)
        dir=${OPTARG}
        if [[ ! -d "${dir}" ]]; then
          fail "No such directory: ${dir}"
        fi
        ;;
      t)
        tuf_dir=${OPTARG}
        if [[ ! -d "${tuf_dir}" ]]; then
          fail "No such directory: ${tuf_dir}"
        fi
        ;;
      ?)
        usage
        exit 1
        ;;
    esac
  done
  shift $((${OPTIND} - 1))

  if [[ $# -ne 0 ]]; then
    usage
    exit 1
  fi

  check_aws_keys
  check_github_token

  bucket="${bucket:-"flynn"}"
  dir="${dir:-$(mktemp -d)}"
  tuf_dir="${tuf_dir:="/etc/flynn/tuf"}"
  domain="${domain:-"dl.flynn.io"}"

  if [[ -z "${commit}" ]]; then
    info "determining commit"
    commit=$(curl -s https://api.github.com/repos/flynn/flynn/git/refs/heads/master | jq --raw-output .object.sha)
    if [[ -z "${commit}" ]]; then
      fail "could not determine commit"
    fi
  fi

  info "checking script is from commit being released"
  local src_commit="$(git rev-parse HEAD)"
  if [[ "${src_commit}" != "${commit}" ]]; then
    info "re-executing using scripts from commit ${commit}"

    export GOPATH="$(mktemp -d)"
    trap "rm -rf ${GOPATH}" EXIT
    local src="${GOPATH}/src/github.com/flynn/flynn"

    info "cloning Flynn source"
    git clone --quiet https://github.com/flynn/flynn "${src}"
    cd "${src}"
    git checkout --force --quiet "${commit}"
    info "building flynn-release binary"
    go build -o util/release/flynn-release ./util/release

    "${src}/script/release-flynn" \
      -b "${bucket}" \
      -c "${commit}" \
      -d "${domain}" \
      -r "${dir}"

    exit 0
  fi
  info "starting release of commit ${commit}"

  info "getting flynn release manifest"
  local manifest="$(s3cmd --no-progress get "s3://${bucket}/release/manifest.json" - 2>/dev/null)"
  if [[ -z "${manifest}" ]]; then
    manifest="$(new_release_manifest)"
  fi

  info "checking for existing release"
  if jq --exit-status ".versions[] | select(.commit==\"${commit}\")" <<< "${manifest}"; then
    fail "commit ${commit} has already been released"
  fi

  info "determining version"
  local version="$(next_release_version <<< "${manifest}")"
  info "using version ${version}"

  info "releasing components"
  "${ROOT}/script/release-components" \
    -k \
    -b "${bucket}" \
    -r "${dir}" \
    -t "${tuf_dir}" \
    "${commit}" \
    "${version}"

  info "tagging release"
  tag_release "${commit}" "${version}"

  info "releasing vm images"
  "${ROOT}/script/release-vm-images" \
    -k \
    -b "${bucket}" \
    -d "${domain}" \
    -r "${dir}" \
    "${version}"

  info "updating flynn release manifest"
  "${ROOT}/util/release/flynn-release" version \
    "${version}" \
    "${commit}" \
    <<< "${manifest}" \
    > "${dir}/manifest.json"

  info "uploading flynn release manifest"
  s3cmd put --acl-public --no-preserve "${dir}/manifest.json" "s3://${bucket}/release/manifest.json"

  info "successfully released Flynn version ${version}"

  info "removing locally built files"
  rm -rf "${dir}"

  info "done!"
}

check_github_token() {
  if [[ -z "${GITHUB_TOKEN}" ]]; then
    fail "GITHUB_TOKEN must be set"
  fi
}

# tag_release tags a release by posting to the following Github API endpoint:
# https://developer.github.com/v3/git/refs/#create-a-reference
tag_release() {
  local commit=$1
  local version=$2

  curl \
    --header "Content-Type: application/json" \
    --header "Authorization: token ${GITHUB_TOKEN}" \
    --data "{\"ref\":\"refs/tags/v${version}\",\"sha\":\"${commit}\"}" \
    "https://api.github.com/repos/flynn/flynn/git/refs"
}

main $@
