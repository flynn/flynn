[
  {
    "id": "require-env",
    "action": "require-env",
    "vars": ["CLUSTER_DOMAIN"]
  },
  {
    "id": "postgres",
    "app": {
      "name": "postgres"
    },
    "action": "run-app",
    "release": {
      "processes": {
        "postgres": {
          "ports": [{"port": 5432, "proto": "tcp"}],
          "data": true,
          "cmd": ["postgres"]
        },
        "web": {
          "ports": [{"port": 80, "proto": "tcp"}],
          "cmd": ["api"]
        }
      }
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/postgresql&id=$image_id[postgresql]"
    },
    "processes": {
      "postgres": 1,
      "web": 1
    }
  },
  {
    "id": "controller-key",
    "action": "gen-random",
    "controller_key": true,
    "data": "{{ getenv \"CONTROLLER_KEY\" }}"
  },
  {
    "id": "dashboard-session-secret",
    "action": "gen-random"
  },
  {
    "id": "dashboard-login-token",
    "action": "gen-random"
  },
  {
    "id": "name-seed",
    "action": "gen-random",
    "length": 10
  },
  {
    "id": "postgres-wait",
    "action": "wait",
    "url": "http://pg-api.discoverd/ping"
  },
  {
    "id": "controller",
    "action": "run-app",
    "app": {
      "name": "controller"
    },
    "release": {
      "env": {
        "AUTH_KEY": "{{ (index .StepData \"controller-key\").Data }}",
        "BACKOFF_PERIOD": "{{ getenv \"BACKOFF_PERIOD\" }}",
        "DEFAULT_ROUTE_DOMAIN": "{{ getenv \"CLUSTER_DOMAIN\" }}",
        "NAME_SEED": "{{ (index .StepData \"name-seed\").Data }}"
      },
      "processes": {
        "web": {
          "ports": [{"port": 80, "proto": "tcp"}],
          "cmd": ["controller"]
        },
        "scheduler": {
          "cmd": ["scheduler"],
          "omni": true
        },
        "deployer": {
          "cmd": ["deployer"]
        }
      }
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/controller&id=$image_id[controller]"
    },
    "processes": {
      "web": 1
    },
    "resources": [{"name":"postgres", "url":"http://pg-api.discoverd/databases"}]
  },
  {
    "id": "controller-wait",
    "action": "wait",
    "url": "http://flynn-controller.discoverd",
    "status": 401
  },
  {
    "id": "controller-inception",
    "action": "add-app",
    "from_step": "controller",
    "app": {
      "name": "controller"
    }
  },
  {
    "id": "postgres-app",
    "action": "add-app",
    "from_step": "postgres",
    "app": {
      "name": "postgres",
      "protected": true
    }
  },
  {
    "id": "scheduler-scale",
    "action": "scale-app",
    "app_step": "controller-inception",
    "processes": {
      "scheduler": 1,
      "deployer": 1,
      "web": 1
    }
  },
  {
    "id": "scheduler",
    "action": "run-app",
    "app_step": "controller-inception",
    "processes": {
      "scheduler": 1
    }
  },
  {
    "id": "deployer",
    "action": "run-app",
    "app_step": "controller-inception",
    "processes": {
      "deployer": 1
    }
  },
  {
    "id": "blobstore",
    "action": "deploy-app",
    "app": {
      "name": "blobstore",
      "protected": true
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/blobstore&id=$image_id[blobstore]"
    },
    "release": {
      "processes": {
        "web": {
          "ports": [{"port": 80, "proto": "tcp"}]
        }
      }
    },
    "processes": {
      "web": 1
    },
    "resources": [{"name":"postgres", "url":"http://pg-api.discoverd/databases"}]
  },
  {
    "id": "router",
    "action": "deploy-app",
    "app": {
      "name": "router",
      "protected": true
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/router&id=$image_id[router]"
    },
    "release": {
      "processes": {
        "app": {
          "host_network": true,
          "cmd": ["-httpaddr", ":80", "-httpsaddr", ":443", "-tcp-range-start", "3000", "-tcp-range-end", "3500"],
          "omni": true
        }
      }
    },
    "processes": {
      "app": 1
    }
  },
  {
    "id": "gitreceive-key",
    "action": "gen-ssh-key"
  },
  {
    "id": "gitreceive",
    "action": "deploy-app",
    "app": {
      "name": "gitreceive",
      "protected": true
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/receiver&id=$image_id[receiver]"
    },
    "release": {
      "processes": {
        "app": {
          "ports": [{"proto": "tcp"}],
          "env": {
            "SSH_PRIVATE_KEYS": "{{ (index .StepData \"gitreceive-key\").PrivateKeys }}",
            "CONTROLLER_AUTH_KEY": "{{ (index .StepData \"controller-key\").Data }}",
            "SLUGBUILDER_IMAGE_URI": "$image_repository?name=flynn/slugbuilder&id=$image_id[slugbuilder]",
            "SLUGRUNNER_IMAGE_URI": "$image_repository?name=flynn/slugrunner&id=$image_id[slugrunner]"
          }
        }
      }
    },
    "processes": {
      "app": 1
    }
  },
  {
    "id": "controller-cert",
    "action": "gen-tls-cert",
    "hosts": ["{{ getenv \"CLUSTER_DOMAIN\" }}", "*.{{ getenv \"CLUSTER_DOMAIN\" }}"]
  },
  {
    "id": "router-wait",
    "action": "wait",
    "url": "http://router-api.discoverd",
    "status": 404
  },
  {
    "id": "gitreceive-route",
    "action": "add-route",
    "app_step": "gitreceive",
    "type": "tcp",
    "config": {
      "service": "gitreceive",
      "port": 2222
    }
  },
  {
    "id": "controller-route",
    "action": "add-route",
    "app_step": "controller-inception",
    "cert_step": "controller-cert",
    "type": "http",
    "config": {
      "service": "flynn-controller",
      "domain": "controller.{{ getenv \"CLUSTER_DOMAIN\" }}"
    }
  },
  {
    "id": "controller-route-wait",
    "action": "wait",
    "url": "http://router-http.discoverd",
    "host": "controller.{{ getenv \"CLUSTER_DOMAIN\" }}",
    "status": 401
  },
  {
    "id": "taffy",
    "action": "deploy-app",
    "app": {
      "name": "taffy",
      "protected": true
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/taffy&id=$image_id[taffy]"
    },
    "release": {
      "env": {
        "CONTROLLER_AUTH_KEY": "{{ (index .StepData \"controller-key\").Data }}",
        "SLUGBUILDER_IMAGE_URI": "$image_repository?name=flynn/slugbuilder&id=$image_id[slugbuilder]",
        "SLUGRUNNER_IMAGE_URI": "$image_repository?name=flynn/slugrunner&id=$image_id[slugrunner]"
      }
    }
  },
  {
    "id": "dashboard",
    "action": "deploy-app",
    "app": {
      "name": "dashboard",
      "protected": true
    },
    "artifact": {
      "type": "docker",
      "uri": "$image_repository?name=flynn/dashboard&id=$image_id[dashboard]"
    },
    "release": {
      "env": {
        "DEFAULT_ROUTE_DOMAIN": "{{ getenv \"CLUSTER_DOMAIN\" }}",
        "CONTROLLER_DOMAIN": "controller.{{ getenv \"CLUSTER_DOMAIN\" }}",
        "CONTROLLER_KEY": "{{ (index .StepData \"controller-key\").Data }}",
        "URL": "https://dashboard.{{ getenv \"CLUSTER_DOMAIN\" }}",
        "SESSION_SECRET": "{{ (index .StepData \"dashboard-session-secret\").Data }}",
        "LOGIN_TOKEN": "{{ (index .StepData \"dashboard-login-token\").Data }}",
        "APP_NAME": "dashboard",
        "STATIC_PATH": "/app",
        "SECURE_COOKIES": "true",
        "CA_CERT": "{{ (index .StepData \"controller-cert\").CACert }}"
      },
      "processes": {
        "web": {
          "ports": [{"port": 80, "proto": "tcp"}]
        }
      }
    },
    "processes": {
      "web": 1
    }
  },
  {
    "id": "dashboard-route",
    "action": "add-route",
    "app_step": "dashboard",
    "cert_step": "controller-cert",
    "type": "http",
    "config": {
      "service": "dashboard-web",
      "domain": "dashboard.{{ getenv \"CLUSTER_DOMAIN\" }}"
    }
  },
  {
    "id": "blobstore-wait",
    "action": "wait",
    "url": "http://blobstore.discoverd",
    "status": 404
  },
  {
    "id": "gitreceive-wait",
    "action": "wait",
    "url": "tcp://gitreceive.discoverd"
  },
  {
    "id": "log-complete",
    "action": "log",
    "output": "\n\nFlynn bootstrapping complete. Install the flynn-cli (see https://cli.flynn.io for instructions) and paste the line below into a terminal window:\n\nflynn cluster add -g {{ getenv \"CLUSTER_DOMAIN\" }}:2222 -p {{ (index .StepData \"controller-cert\").Pin }} default https://controller.{{ getenv \"CLUSTER_DOMAIN\" }} {{ (index .StepData \"controller-key\").Data }}\n\nThe built-in dashboard can be accessed at http://dashboard.{{ getenv \"CLUSTER_DOMAIN\" }} with login token {{ (index .StepData \"dashboard-login-token\").Data }}"
  }
]
